- name: Create infrastructure w/ terraform
  hosts: localhost
  tasks:
    - name: Run terraform
      terraform:
        project_path: "../terraform"
        force_init: yes
        state: present
      register: trfrm

    - name: Add tg host
      add_host:
        name: tgbot_server
        groups: nodes
        ansible_host: "{{ trfrm.outputs.servers.value.tgbot_server_ip4 }}"
        ansible_ssh_private_key_file: ~/.ssh/sung_ar
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

    - name: Add db host
      add_host:
        name: db_server
        groups: nodes
        ansible_host: "{{ trfrm.outputs.servers.value.db_server_ip4 }}"
        ansible_ssh_private_key_file: ~/.ssh/sung_ar
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

    - name: Add api host
      add_host:
        name: api_server
        groups: nodes
        ansible_host: "{{ trfrm.outputs.servers.value.api_server_ip4 }}"
        ansible_ssh_private_key_file: ~/.ssh/sung_ar
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

- name: Get secrets from vault
  hosts: localhost
  tasks:
    - name: Get bot secrets from vault
      community.hashi_vault.vault_kv2_get:
        url: "http://localhost:8200"
        path: tgbot
      register: tgbot

    - name: Get api secrets from vault
      community.hashi_vault.vault_kv2_get:
        url: "http://localhost:8200"
        path: api
      register: api

    - name: Get db secrets from vault
      community.hashi_vault.vault_kv2_get:
        url: "http://localhost:8200"
        path: database
      register: database

- name: Wait out the timeout for creating db instance
  hosts: localhost
  connection: local
  tasks:
    - name: Wait for db port 22
      wait_for:
        host: "{{ trfrm.outputs.servers.value.db_server_ip4}}"
        port: 22

- name: Configure database host
  hosts: db_server
  vars:
    db_name: "{{ hostvars.localhost.database.secret.db_name }}"
    db_user: "{{ hostvars.localhost.database.secret.db_user }}"
    db_password: "{{ hostvars.localhost.database.secret.db_password }}"

  become: yes
  handlers:
    - name: Restart PostgreSQL
      ansible.builtin.systemd:
        name: postgresql
        state: restarted
  tasks:
    - name: Update apt package cache
      apt:
        update_cache: yes

    - name: Install PSQL and Psycopg2
      apt:
        name:
          - postgresql
          - python3-psycopg2
        state: present

    - name: Configure PostgreSQL
      ansible.builtin.template:
        src: ./templates/pg_hba.conf
        dest: /etc/postgresql/14/main/pg_hba.conf
        owner: postgres
        group: postgres
        mode: 0640

    - name: Start and enable the service
      ansible.builtin.systemd:
        name: postgresql
        state: restarted
        enabled: true

    - name: Set options
      community.postgresql.postgresql_set:
        name: "listen_addresses"
        value: "*"
      become: yes
      notify:
        - Restart PostgreSQL

    - name: Create the database
      community.postgresql.postgresql_db:
        name: "{{ db_name }}"
        encoding: "UTF-8"
      become: true

    - name: Create database user
      community.postgresql.postgresql_user:
        state: present
        name: "{{ db_user }}"
        password: "{{ db_password }}"
      become: yes

    - name: Grant user access to db
      community.postgresql.postgresql_privs:
        type: database
        database: "{{ db_name }}"
        roles: "{{ db_user }}"
        grant_option: no
        privs: all
      become: yes


- name: Fill db from backup
  hosts: localhost
  vars:
    db_name: "{{ hostvars.localhost.database.secret.db_name }}"
    db_user: "{{ hostvars.localhost.database.secret.db_user }}"
    db_password: "{{ hostvars.localhost.database.secret.db_password }}"
  tasks:
    - name: Execute backup script
      community.postgresql.postgresql_db:
        login_host: "{{ trfrm.outputs.servers.value.db_server_ip4 }}"
        db: "{{ db_name }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        target: "../database_data/cheque_db.psql"
        state: restore



- name: Wait out the timeout for creating api instance
  hosts: localhost
  connection: local
  tasks:
    - name: Wait for api port 22
      wait_for:
        host: "{{ trfrm.outputs.servers.value.api_server_ip4}}"
        port: 22

- name: Configure api host
  hosts: api_server
  tasks:
    - name: Update apt package cache
      become: yes
      apt:
        update_cache: yes

    - name: Install python
      become: yes
      apt:
        name:
          - python3
        state: present

    - name: Copy api distrib to api host
      ansible.builtin.copy:
        src: ../server_dist
        dest: ~/

    - name: Install python libs
      ansible.builtin.pip:
        chdir: server_dist
        requirements: ./requirements.txt
        name: ./*.whl
#- name: Wait for api port 22
#  wait_for:
#    host: "{{ trfrm.outputs.servers.value.api_server_ip4}}"
#    port: 22
